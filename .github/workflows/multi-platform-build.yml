name: Multi-Platform Docker Build

on:
  workflow_dispatch:
  schedule:
    # run every day at 4:30
    - cron: '30 4 * * *'
  push:
    branches: [master]

env:
  REGISTRY_IMAGE: joltdesign/php

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-22.04
          - platform: linux/arm64
            runner: ubuntu-22.04-arm
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5

      - name: Read PHP versions
        id: versions
        run: echo "versions=$(jq -r '.["php-versions"] | join(",")' versions.json)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/bake-action@v6
        env:
          PHP_VERSIONS: ${{ steps.versions.outputs.versions }}
        # Don't override 'name' here â€” let docker-bake.hcl 'tags' control image names.
        # Overriding 'name' to the repository without tags causes buildx to attempt
        # pushing tagged refs by digest which Docker Hub rejects; removing the
        # name override avoids the "can't push tagged ref ... by digest" error.
        with:
          set: |
            *.platform=${{ matrix.platform }}
            *.output=type=image,push=true

      - name: Export digest and mapping
        run: |
          set -euo pipefail
          mkdir -p /tmp/digests
          # Mapping JSON path (per-platform)
          MAPJSON="/tmp/digests/mapping-${PLATFORM_PAIR}.json"
          # Build mapping from bake metadata: tag -> digest
          echo '{}' > "$MAPJSON"

          if echo '${{ steps.build.outputs.metadata }}' | jq -e '. | length > 0' >/dev/null 2>&1; then
            # Create an array of {name, digest} objects for entries that include containerimage.digest
            echo '${{ steps.build.outputs.metadata }}' | jq -c '[ to_entries[] | select(.value."containerimage.digest") | {name: .value."containerimage.name", digest: .value."containerimage.digest"} ]' > /tmp/_meta_array.json
            if [ -s /tmp/_meta_array.json ]; then
              # For each element, if name contains a tag (':' and not '@'), add to mapping
              jq -c '.[]' /tmp/_meta_array.json | while read -r obj; do
                name=$(echo "$obj" | jq -r '.name')
                digest=$(echo "$obj" | jq -r '.digest')
                [ -n "$digest" ] || continue
                touch "/tmp/digests/${digest#sha256:}"
                if [[ "$name" == *":"* && "$name" != *"@"* ]]; then
                  # add mapping: set key name -> digest (string)
                  jq --arg k "$name" --arg v "$digest" '. + {($k): $v}' "$MAPJSON" > "$MAPJSON.tmp" && mv "$MAPJSON.tmp" "$MAPJSON"
                fi
              done
            fi
          fi

          # At minimum create a plain digest file for any single built image referenced in metadata
          # (mapping JSON is authoritative for merge job)

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests and mappings
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout (for versions file)
        uses: actions/checkout@v5

      - name: Create manifest lists and push
        working-directory: /tmp/digests
        run: |
          # Combine all per-platform mapping JSONs into a single mapping (tag -> digest array)
          COMBINED="/tmp/digests/combined-mapping.json"
          echo '{}' > "$COMBINED"
          for mj in mapping-*.json; do
            [ -f "$mj" ] || continue
            # mj is an object mapping tag -> digest; convert to tag -> [digest] and merge
            jq -r 'to_entries[] | @base64' "$mj" | while read -r e; do
              entry=$(echo "$e" | base64 --decode)
              tag=$(echo "$entry" | jq -r '.key')
              digest=$(echo "$entry" | jq -r '.value')
              # append digest to combined mapping for this tag if not present
              jq --arg t "$tag" --arg d "$digest" '(.[$t] //= []) | if index($d; .[$t]) then . else .[$t] += [$d] end' "$COMBINED" > "$COMBINED.tmp" 2>/dev/null || true
              # fallback merge if the above jq expression fails (compat)
              if [ -f "$COMBINED.tmp" ]; then mv "$COMBINED.tmp" "$COMBINED"; fi
            done
          done

          # Create manifests for all PHP versions and variants using combined mapping
          for version in $(jq -r '.["php-versions"][]' "${{ github.workspace }}/versions.json"); do
            for runtime in "" "-apache"; do
              for suffix in "" "-dev"; do
                tag="${{ env.REGISTRY_IMAGE }}:${version}${runtime}${suffix}"
                echo "Creating manifest for $tag"
                # get digests array for this tag
                digs=$(jq -r --arg t "$tag" '.[$t] // [] | @sh' "$COMBINED")
                # convert to bash array
                eval "darr=$digs"
                # build args for imagetools
                args=()
                for d in "${darr[@]}"; do
                  args+=("${{ env.REGISTRY_IMAGE }}@$d")
                done
                if [ ${#args[@]} -eq 0 ]; then
                  echo "Warning: no digests found for $tag; skipping"
                  continue
                fi
                docker buildx imagetools create -t "$tag" "${args[@]}"
              done
            done
          done
