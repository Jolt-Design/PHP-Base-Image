name: Multi-Platform Docker Build

on:
  workflow_dispatch:
  schedule:
    # run every day at 4:30
    - cron: '30 4 * * *'
  push:
    branches: [master]

env:
  REGISTRY_IMAGE: joltdesign/php

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-22.04
          - platform: linux/arm64
            runner: ubuntu-22.04-arm
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5

      - name: Read PHP versions
        id: versions
        run: echo "versions=$(jq -r '.["php-versions"] | join(",")' versions.json)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/bake-action@v6
        env:
          PHP_VERSIONS: ${{ steps.versions.outputs.versions }}
        # Don't override 'name' here — let docker-bake.hcl 'tags' control image names.
        # Overriding 'name' to the repository without tags causes buildx to attempt
        # pushing tagged refs by digest which Docker Hub rejects; removing the
        # name override avoids the "can't push tagged ref ... by digest" error.
        with:
          set: |
            *.platform=${{ matrix.platform }}
            # Use normal push; do not force push-by-digest which can cause Docker
            # Hub to reject pushing tagged refs by digest.
            *.output=type=image,push=true

      - name: Export digest
        run: |
          set -euo pipefail
          mkdir -p /tmp/digests
          # Try to extract digests from build metadata first (works if bake emitted them)
          if echo '${{ steps.build.outputs.metadata }}' | jq -e '. | length > 0' >/dev/null 2>&1; then
            echo '${{ steps.build.outputs.metadata }}' | jq -r 'to_entries[] | select(.value."containerimage.digest") | .value."containerimage.digest"' | while read -r digest; do
              [ -n "$digest" ] || continue
              touch "/tmp/digests/${digest#sha256:}"
            done
          fi

          # If no digests found in metadata, fall back to querying the registry for this job's platform
          if [ -z "$(ls -A /tmp/digests || true)" ]; then
            echo "No digests found in bake metadata — querying registry for per-platform digests"
            # PLATFORM_PAIR is set in Prepare step (e.g. linux-amd64)
            PLATFORM_PAIR=${PLATFORM_PAIR}
            # For each version/runtime/suffix combination, inspect the pushed tag and pick the manifest for this platform
            for version in $(jq -r '.["php-versions"][]' versions.json); do
              for runtime in "" "-apache"; do
                for suffix in "" "-dev"; do
                  tag="${{ env.REGISTRY_IMAGE }}:${version}${runtime}${suffix}"
                  echo "Inspecting $tag for platform $PLATFORM_PAIR"
                  # imagetools inspect returns manifest list JSON; select the digest for the matching platform
                  # Note: buildx imagetools is available after setup-buildx-action
                  if docker buildx imagetools inspect --raw "$tag" >/tmp/manifest.json 2>/dev/null; then
                    jq -r --arg pair "$PLATFORM_PAIR" '.manifests[] | select((.platform.os//"") + "-" + (.platform.architecture//"") == $pair) | .digest' /tmp/manifest.json | while read -r digest; do
                      [ -n "$digest" ] || continue
                      touch "/tmp/digests/${digest#sha256:}"
                    done
                  else
                    echo "Warning: failed to inspect $tag — it may not exist yet"
                  fi
                done
              done
            done
          fi

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout (for versions file)
        uses: actions/checkout@v5

      - name: Create manifest lists and push
        working-directory: /tmp/digests
        run: |
          # Create manifests for all PHP versions and variants
          for version in $(jq -r '.["php-versions"][]' "${{ github.workspace }}/versions.json"); do
            for runtime in "" "-apache"; do
              for suffix in "" "-dev"; do
                tag="${{ env.REGISTRY_IMAGE }}:${version}${runtime}${suffix}"
                echo "Creating manifest for $tag"
                docker buildx imagetools create -t "$tag" \
                  $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
              done
            done
          done
